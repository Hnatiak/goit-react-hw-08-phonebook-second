{"version":3,"file":"static/js/911.a66b058b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/contacts-selectors.js","views/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"title\":\"ContactForm_title__jZguf\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","// import React from 'react';\n// import { useState } from 'react';\n// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { PropTypes } from 'prop-types';\n// import {\n//   addContact,\n//   fetchContacts,\n// } from '../../redux/contacts/contacts-actions';\n// import css from './ContactForm.module.css';\n\n// export default function ContactForm({ onSubmit }) {\n//   const [name, setName] = useState('');\n//   const [phone, setPhone] = useState('');\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   const handleChange = ({ currentTarget: { name, value } }) => {\n//     name === 'name' ? setName(value) : setPhone(value);\n//   };\n\n//   const resetState = () => {\n//     setName('');\n//     setPhone('');\n//   };\n//   console.log(onSubmit);\n\n//   const handleSubmit = e => {\n//     resetState();\n//     dispatch(addContact({ name, phone }));\n//     e.preventDefault();\n//     onSubmit({ name, phone });\n//   };\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label className={css.label}>\n//       <span className={css.title}>Name</span>\n//         <input\n//           className={css.input}\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           onChange={handleChange}\n//           required\n//         />\n//       </label>\n//       <label className={css.label}>\n//       <span className={css.title}>Number</span>\n//         <input\n//           className={css.input}\n//           type=\"tel\"\n//           name=\"phone\"\n//           value={phone}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           onChange={handleChange}\n//           required\n//         />\n//       </label>\n//       <button className={css.button} type=\"submit\">\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// }\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\nimport style from \"./ContactForm.module.css\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from '@mui/material';\nimport { TextField } from '@mui/material';\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    let contactForAdd = { name: this.state.name, number: this.state.number };\n\n    this.props.onSubmitData(contactForAdd);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n  render() {\n    return (\n      <div className={style.contactform}>\n        <form type=\"submit\" onSubmit={this.handleSubmit}>\n          <TextField\n            label=\"Name:\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n            value={this.state.name}\n          />\n          <TextField\n            label=\"Number:\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n            value={this.state.number}\n          />\n          <br />\n          <Button\n            style={{ marginTop: 25 }}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Add contact\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmitData: PropTypes.func.isRequired,\n};\nexport default ContactForm;","// import React from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { PropTypes } from 'prop-types';\n// import { FaTrash, FaUserAlt } from 'react-icons/fa';\n// import { removeContact } from '../../redux/contacts/contacts-actions.js';\n// // import { removeContact } from '../../redux/contacts/contacts-actions.js';\n// import { getFilteredContacts } from '../../redux/contacts/contacts-operations.js';\n// import css from './ContactList.module.css';\n\n// function ContactList() {\n//   const visibleContacts = useSelector(getFilteredContacts);\n//   const dispatch = useDispatch();\n\n//   const contactsList = visibleContacts.map(({ id, name, phone }) => (\n//     <ul className={css.contactList}>\n//         <li className={css.wrapper} key={id}>\n//             <span className={css.icon}>\n//                 <FaUserAlt />\n//             </span>\n//             <span className={css.span}>{name}: {phone}</span>\n//           <div>\n//             <button\n//               className={css.button}\n//               id={id}\n//               type=\"button\"\n//               onClick={() => dispatch(removeContact(id))}\n//             >\n//               <FaTrash />\n//             </button>\n//           </div>\n//         </li>\n//     </ul>\n//   ));\n\n//   return <ul>{contactsList}</ul>;\n// }\n\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from '@mui/material';\n\nclass ContactList extends Component {\n  deleteId = (Id) => {\n    this.props.del(Id);\n  };\n  createList = () => {\n    return this.props.contacts.map((contact) => {\n      return (\n        <li key={contact.id} id={contact.id}>\n          <Button\n            style={{ marginLeft: 25, height: 30, margin: 5 }}\n            data-id={contact.id}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => this.deleteId(contact.id)}\n          >\n            Delete\n          </Button>\n          {`${contact.name}: ${contact.number}`}\n        </li>\n      );\n    });\n  };\n\n  render() {\n    return <ul>{this.createList()}</ul>;\n  }\n}\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  del: PropTypes.func.isRequired,\n};\nContactList.defaultProps = {\n  contacts: [],\n};\n\nexport default ContactList;","// import React from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { setFilter } from '../../redux/filter/filter-actions';\n// import css from './Filter.module.css';\n\n// function Filter() {\n//   const filter = useSelector(state => state.contacts.filter);\n\n//   const dispatch = useDispatch();\n//   const handleFilterContacts = e => {\n//     return dispatch(setFilter(e.currentTarget.value));\n//   };\n//   return (\n//     <label className={css.label}>\n//        <p className={css.text}>Find contacts by name</p>\n//       <input\n//         className={css.input}\n//         type=\"text\"\n//         name=\"filter\"\n//         value={filter}\n//         onChange={handleFilterContacts}\n//       />\n//     </label>\n//   );\n// }\n\n// export default Filter;\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField } from '@mui/material';\n\nclass Filter extends Component {\n  setFilterValue = (event) => {\n    let value = event.currentTarget.value.toUpperCase();\n    this.props.setFilterToState(value);\n  };\n\n  render() {\n    return (\n      <div>\n        <TextField label=\"Filter \" onChange={this.setFilterValue} />\n      </div>\n    );\n  }\n}\n\nFilter.propTypes = {\n  setFilterToState: PropTypes.func.isRequired,\n};\nexport default Filter;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","// import { createSlice } from '@reduxjs/toolkit';\n\n// import {\n//   fetchContacts,\n//   addContact,\n//   removeContact,\n// } from './contacts-actions';\n\n// // import contactsOperation from './contacts-operations';\n\n// const initialState = {\n//   items: [],\n//   loading: false,\n//   error: null,\n\n//   // contacts: {\n//   //   items: [],\n//   //   isLoading: false,\n//   //   error: null\n//   // },\n//   // filter: \"\"\n// };\n\n// const contactsSlice = createSlice({\n//   name: 'contacts',\n//   initialState,\n//   extraReducers: {\n//     [fetchContacts.pending]: store => {\n//       store.isLoading = true;\n//       store.error = null;\n//     },\n//     [fetchContacts.fulfilled]: (store, { payload }) => {\n//       store.isLoading = false;\n//       store.items = payload;\n//     },\n//     [fetchContacts.rejected]: (store, { payload }) => {\n//       store.isLoading = false;\n//       store.error = payload;\n//     },\n//     [addContact.pending]: store => {\n//       store.isLoading = true;\n//       store.error = null;\n//     },\n//     [addContact.fulfilled]: (store, { payload }) => {\n//       store.isLoading = false;\n//       store.items.push(payload);\n//     },\n//     [addContact.rejected]: (store, { payload }) => {\n//       store.isLoading = false;\n//       store.error = payload;\n//     },\n//     [removeContact.pending]: store => {\n//       store.isLoading = true;\n//       store.error = null;\n//     },\n//     [removeContact.fulfilled]: (store, { payload }) => {\n//       store.isLoading = false;\n//       store.items = store.items.filter(item => item.id !== payload);\n//     },\n//     [removeContact.rejected]: (store, { payload }) => {\n//       store.isLoading = false;\n//       store.error = payload;\n//     },\n//   },\n// });\n\n// // const contactsSlice = createSlice({\n// //   name: 'contacts',\n// //   initialState,\n// //   extraReducers: {\n// //     [fetchContacts.register.fulfilled](state, action) {\n// //       state.user = action.payload.user;\n// //       state.token = action.payload.token;\n// //       state.isLoggedIn = true;\n// //     }\n// //     // [addContact.register.fulfilled](state, action) {}\n// //     // [removeContact.register.fulfilled](state, action) {}\n// //   },\n// // })\n\n// export default contactsSlice.reducer;\n\nimport { createSelector } from \"@reduxjs/toolkit\";\n\nconst getIsLoading = (state) => state.app.loading;\nconst getFilter = (state) => state.app.filters;\nconst getContacts = (state) => state.app.contacts;\n\n/* const getVisibleFilterArray = (state) => {\n  const allContacts = getContacts(state);\n  const filterNames = getFilter(state);\n  let newArr = allContacts.filter(({ name }) =>\n    name.toUpperCase().includes(filterNames)\n  );\n  return [...newArr];\n}; */\n\n// add memo\nconst getVisibleFilterArray = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    let newArr = contacts.filter(({ name }) =>\n      name.toUpperCase().includes(filter)\n    );\n    return [...newArr];\n  }\n);\n\nconst contactsSelector = {\n  getIsLoading, getFilter, getContacts, getVisibleFilterArray\n}\n\nexport default contactsSelector;\n","import React, { Component } from \"react\";\nimport ContactForm from \"../components/ContactForm/ContactForm\";\nimport ContactList from \"../components/ContactList/ContactList\";\nimport Filter from \"../components/Filter/Filter\";\nimport appActions from \"../redux/contacts/contacts-actions\";\nimport appOperations from \"../redux/contacts/contacts-operations\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../redux/contacts/contacts-selectors\";\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"contacts\">\n        <h1>Phonebook</h1>\n        {this.props.isLoadingContacts && <h2>Loading ...</h2>}\n        <ContactForm onSubmitData={this.props.formSubmitHandler} />\n        <h1>Contacts</h1>\n        <Filter setFilterToState={this.props.filterSet} />\n        <ContactList\n          contacts={this.props.visibleArray}\n          del={this.props.contactDelete}\n        />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: selectors.getIsLoading(state),\n  contacts: selectors.getContacts(state),\n  filter: selectors.getFilter(state),\n  visibleArray: selectors.getVisibleFilterArray(state),\n});\n\nconst mapDispatchToProrps = (dispatch) => ({\n  fetchContacts: () => dispatch(appOperations.fetchContacts()),\n  formSubmitHandler: (contactData) =>\n    dispatch(appOperations.addContact(contactData)),\n  contactDelete: (contactId) =>\n    dispatch(appOperations.deleteContact(contactId)),\n  filterSet: (str) => dispatch(appActions.filterSet(str)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProrps)(ContactsView);"],"names":["ContactForm","state","name","number","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contactForAdd","props","onSubmitData","reset","className","style","type","onSubmit","this","TextField","label","pattern","title","required","onChange","Button","marginTop","variant","color","Component","ContactList","deleteId","Id","del","createList","contacts","map","contact","id","marginLeft","height","margin","onClick","defaultProps","Filter","setFilterValue","toUpperCase","setFilterToState","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getFilter","app","filters","getContacts","getIsLoading","loading","getVisibleFilterArray","filter","newArr","includes","ContactsView","fetchContacts","isLoadingContacts","formSubmitHandler","filterSet","visibleArray","contactDelete","connect","selectors","dispatch","appOperations","contactData","contactId","str","appActions"],"sourceRoot":""}