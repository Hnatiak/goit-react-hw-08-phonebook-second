{"version":3,"file":"static/js/884.684aabb0.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/app/app-selectors.js","views/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"title\":\"ContactForm_title__jZguf\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"button_seccond\":\"ContactForm_button_seccond__Akv4A\"};","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Button } from '@mui/material';\nimport style from \"./ContactForm.module.css\";\n\nconst ContactForm = ({ onSubmitData }) => {\nconst [state, setState] = useState({\nname: \"\",\nnumber: \"\",\n});\n\nconst handleChange = (event) => {\nconst { name, value } = event.currentTarget;\nsetState((prevState) => ({ ...prevState, [name]: value }));\n};\n\nconst handleSubmit = (event) => {\nevent.preventDefault();\nconst { name, number } = state;\nconst contactForAdd = { name, number };\nonSubmitData(contactForAdd);\nreset();\n};\n\nconst reset = () => {\nsetState({ name: \"\", number: \"\" });\n};\n\nreturn (\n<div className={style.form}>\n  <h1 style={{ marginBottom: 25 }}>Add contact</h1>\n  <form type=\"submit\" onSubmit={handleSubmit}>\n    <TextField\n    label=\"Name:\"\n    type=\"text\"\n    name=\"name\"\n    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я])$\"\n    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    required\n    onChange={handleChange}\n    value={state.name}\n    style={{ marginRight: 25 }}\n    />\n    <TextField\n           label=\"Number:\"\n           type=\"tel\"\n           name=\"number\"\n           pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n           required\n           onChange={handleChange}\n           value={state.number}\n         />\n    <br />\n    <Button\n    className={style.button_second}\n    type=\"submit\"\n    variant=\"contained\"\n    color=\"primary\"\n    style={{ marginTop: 25 }}\n    >\n    Add contact\n    </Button>\n  </form>\n</div>\n);\n};\n\nContactForm.propTypes = {\nonSubmitData: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"icon\":\"ContactList_icon__Ly80F\",\"text\":\"ContactList_text__+NWAW\",\"span\":\"ContactList_span__Mbz+M\",\"wrapper\":\"ContactList_wrapper__VP-XU\",\"button\":\"ContactList_button__7kL4l\",\"button_second\":\"ContactList_button_second__SaNPw\",\"contacts_list\":\"ContactList_contacts_list__jhchV\"};","import PropTypes from \"prop-types\";\nimport { Button } from \"@mui/material\";\nimport css from \"./ContactList.module.css\";\n\nfunction ContactList({ contacts, del }) {\nconst deleteId = (Id) => {\ndel(Id);\n};\n\nconst createList = () => {\n  return contacts.map((contact) => {\n    return (\n    <li key={contact.id} id={contact.id} className={css.contacts_list}>\n    <Button\n    className={css.button_second}\n    data-id={contact.id}\n    variant=\"contained\"\n    color=\"primary\"\n    onClick={() => deleteId(contact.id)}\n    >\n    Delete\n    </Button>\n      {`${contact.name}: ${contact.number}`}\n    </li>\n    );\n  });\n};\n\nreturn <ul>{createList()}</ul>;\n}\n\nContactList.propTypes = {\ncontacts: PropTypes.array,\ndel: PropTypes.func.isRequired,\n};\n\nContactList.defaultProps = {\ncontacts: [],\n};\n\nexport default ContactList;","import { TextField } from '@mui/material';\nimport PropTypes from 'prop-types';\n\nfunction Filter(props) {\n  const setFilterValue = (event) => {\n    let value = event.currentTarget.value.toUpperCase();\n    props.setFilterToState(value);\n  };\n\n  return (\n    <div>\n      <TextField\n        label=\"Filter\"\n        onChange={setFilterValue}\n        style={{ marginBottom: 25, width: 475 }}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  setFilterToState: PropTypes.func.isRequired,\n};\n\nexport default Filter;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getIsLoading = (state) => state.app.loading;\nconst getFilter = (state) => state.app.filters;\nconst getContacts = (state) => state.app.contacts;\n\n/* const getVisibleFilterArray = (state) => {\n  const allContacts = getContacts(state);\n  const filterNames = getFilter(state);\n  let newArr = allContacts.filter(({ name }) =>\n    name.toUpperCase().includes(filterNames)\n  );\n  return [...newArr];\n}; */\n\n// add memo\nconst getVisibleFilterArray = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    let newArr = contacts.filter(({ name }) =>\n      name.toUpperCase().includes(filter)\n    );\n    return [...newArr];\n  }\n);\n\nconst contactsSelector = {\n  getIsLoading, getFilter, getContacts, getVisibleFilterArray\n}\n\nexport default contactsSelector;\n","import { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport ContactForm from \"../components/ContactForm/ContactForm\";\nimport ContactList from \"../components/ContactList/ContactList\";\nimport Filter from \"../components/Filter/Filter\";\nimport appActions from \"../redux/app/app-actions\";\nimport appOperations from \"../redux/app/app-operations\";\nimport selectors from \"../redux/app/app-selectors\";\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ContactsView({\n  isLoadingContacts,\n  contacts,\n  filter,\n  visibleArray,\n  fetchContacts,\n  formSubmitHandler,\n  contactDelete,\n  filterSet,\n}) {\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n\n  return (\n    <div className=\"contacts\" style={{ marginTop: 65 }}>\n      {/* <h1 className={styles.title}>\n         {/* Phone<span className={styles.title__color}>book</span>\n       </h1> */}\n      {isLoadingContacts && <h2>Loading ...</h2>}\n      <ContactForm onSubmitData={formSubmitHandler} />\n      <h1 style={{ marginBottom: 25 }}>Contacts</h1>\n      <Filter setFilterToState={filterSet} />\n      <ToastContainer />\n      <ContactList contacts={visibleArray} del={contactDelete} />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: selectors.getIsLoading(state),\n  contacts: selectors.getContacts(state),\n  filter: selectors.getFilter(state),\n  visibleArray: selectors.getVisibleFilterArray(state),\n});\n\nconst mapDispatchToProrps = (dispatch) => ({\n  fetchContacts: () => dispatch(appOperations.fetchContacts()),\n  formSubmitHandler: (contactData) =>\n    dispatch(appOperations.addContact(contactData)),\n  contactDelete: (contactId) =>\n    dispatch(appOperations.deleteContact(contactId)),\n  filterSet: (str) => dispatch(appActions.filterSet(str)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProrps)(ContactsView);"],"names":["onSubmitData","useState","name","number","state","setState","handleChange","event","currentTarget","value","prevState","reset","className","style","marginBottom","type","onSubmit","preventDefault","TextField","label","pattern","title","required","onChange","marginRight","Button","variant","color","marginTop","ContactList","contacts","del","map","contact","id","css","onClick","Id","defaultProps","props","toUpperCase","setFilterToState","width","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getFilter","app","filters","getContacts","getIsLoading","loading","getVisibleFilterArray","filter","newArr","includes","connect","isLoadingContacts","selectors","visibleArray","dispatch","fetchContacts","appOperations","formSubmitHandler","contactData","contactDelete","contactId","filterSet","str","appActions","useEffect"],"sourceRoot":""}